
AVRASM ver. 2.1.30  E:\Development\AVR Programming\Practices\03. 3-7 Segments\7-SEGMENTS ATMEGA32\Project Files\Debug\List\7-SEGMENTS ATMEGA32.asm Sat May 13 16:44:20 2023

E:\Development\AVR Programming\Practices\03. 3-7 Segments\7-SEGMENTS ATMEGA32\Project Files\Debug\List\7-SEGMENTS ATMEGA32.asm(1088): warning: Register r4 already defined by the .DEF directive
E:\Development\AVR Programming\Practices\03. 3-7 Segments\7-SEGMENTS ATMEGA32\Project Files\Debug\List\7-SEGMENTS ATMEGA32.asm(1089): warning: Register r5 already defined by the .DEF directive
E:\Development\AVR Programming\Practices\03. 3-7 Segments\7-SEGMENTS ATMEGA32\Project Files\Debug\List\7-SEGMENTS ATMEGA32.asm(1090): warning: Register r6 already defined by the .DEF directive
E:\Development\AVR Programming\Practices\03. 3-7 Segments\7-SEGMENTS ATMEGA32\Project Files\Debug\List\7-SEGMENTS ATMEGA32.asm(1091): warning: Register r7 already defined by the .DEF directive
E:\Development\AVR Programming\Practices\03. 3-7 Segments\7-SEGMENTS ATMEGA32\Project Files\Debug\List\7-SEGMENTS ATMEGA32.asm(1092): warning: Register r8 already defined by the .DEF directive
E:\Development\AVR Programming\Practices\03. 3-7 Segments\7-SEGMENTS ATMEGA32\Project Files\Debug\List\7-SEGMENTS ATMEGA32.asm(1093): warning: Register r9 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.14 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega32
                 ;Program type           : Application
                 ;Clock frequency        : 8.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 512 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega32
                 	#pragma AVRPART MEMORY PROG_FLASH 32768
                 	#pragma AVRPART MEMORY EEPROM 1024
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 2048
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x085F
                 	.EQU __DSTACK_SIZE=0x0200
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _i=R4
                 	.DEF _i_msb=R5
                 	.DEF _j=R6
                 	.DEF _j_msb=R7
                 	.DEF _k=R8
                 	.DEF _k_msb=R9
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 003e 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
00002a 0000
00002b 0000      	.DB  0x0,0x0,0x0,0x0
00002c 0000      	.DB  0x0,0x0
                 
                 _0x3:
00002d 003f
00002e 0006
00002f 005b
000030 004f      	.DB  0x3F,0x0,0x6,0x0,0x5B,0x0,0x4F,0x0
000031 0066
000032 006d
000033 007d
000034 0007      	.DB  0x66,0x0,0x6D,0x0,0x7D,0x0,0x7,0x0
000035 007f
E:\Development\AVR Programming\Practices\03. 3-7 Segments\7-SEGMENTS ATMEGA32\Project Files\Debug\List\7-SEGMENTS ATMEGA32.asm(1132): warning: .cseg .db misalignment - padding zero byte
000036 006f      	.DB  0x7F,0x0,0x6F
                 
                 __GLOBAL_INI_TBL:
000037 0006      	.DW  0x06
000038 0004      	.DW  0x04
000039 0054      	.DW  __REG_VARS*2
                 
00003a 0013      	.DW  0x13
00003b 0260      	.DW  _seven_seg
00003c 005a      	.DW  _0x3*2
                 
                 _0xFFFFFFFF:
00003d 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
00003e 94f8      	CLI
00003f 27ee      	CLR  R30
000040 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000041 e0f1      	LDI  R31,1
000042 bffb      	OUT  GICR,R31
000043 bfeb      	OUT  GICR,R30
000044 bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
000045 e08d      	LDI  R24,(14-2)+1
000046 e0a2      	LDI  R26,2
000047 27bb      	CLR  R27
                 __CLEAR_REG:
000048 93ed      	ST   X+,R30
000049 958a      	DEC  R24
00004a f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
00004b e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
00004c e098      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
00004d e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
00004e 93ed      	ST   X+,R30
00004f 9701      	SBIW R24,1
000050 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
000051 e6ee      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000052 e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000053 9185      	LPM  R24,Z+
000054 9195      	LPM  R25,Z+
000055 9700      	SBIW R24,0
000056 f061      	BREQ __GLOBAL_INI_END
000057 91a5      	LPM  R26,Z+
000058 91b5      	LPM  R27,Z+
000059 9005      	LPM  R0,Z+
00005a 9015      	LPM  R1,Z+
00005b 01bf      	MOVW R22,R30
00005c 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
00005d 9005      	LPM  R0,Z+
00005e 920d      	ST   X+,R0
00005f 9701      	SBIW R24,1
000060 f7e1      	BRNE __GLOBAL_INI_LOOP
000061 01fb      	MOVW R30,R22
000062 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000063 e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000064 bfed      	OUT  SPL,R30
000065 e0e8      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000066 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000067 e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000068 e0d2      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000069 940c 006b 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x260
                 
                 	.CSEG
                 ;/*******************************************************
                 ;This program was created by the
                 ;CodeWizardAVR V3.14 Advanced
                 ;Automatic Program Generator
                 ;� Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 ;
                 ;Project :
                 ;Version :
                 ;Date    : 5/12/2023
                 ;Author  :
                 ;Company :
                 ;Comments:
                 ;
                 ;
                 ;Chip type               : ATmega32
                 ;Program type            : Application
                 ;AVR Core Clock frequency: 8.000000 MHz
                 ;Memory model            : Small
                 ;External RAM size       : 0
                 ;Data Stack size         : 512
                 ;*******************************************************/
                 ;
                 ;#include <mega32.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x80
                 	.EQU __sm_mask=0x70
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0x60
                 	.EQU __sm_ext_standby=0x70
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <delay.h>
                 ;
                 ;int i = 0; // yekan
                 ;int j = 0; // dahgan
                 ;int k = 0; // sadgan
                 ;int seven_seg[10] = {0x3f, 0x06, 0x5b, 0x4f, 0x66, 0x6d, 0x7d, 0x07, 0x7f, 0x6f};
                 
                 	.DSEG
                 ;
                 ;void main(void)
                 ; 0000 0021 {
                 
                 	.CSEG
                 _main:
                 ; .FSTART _main
                 ; 0000 0022     // Declare your local variables here
                 ; 0000 0023 
                 ; 0000 0024     // Input/Output Ports initialization
                 ; 0000 0025     // Port A initialization
                 ; 0000 0026     // Function: Bit7=Out Bit6=Out Bit5=Out Bit4=Out Bit3=Out Bit2=Out Bit1=Out Bit0=Out
                 ; 0000 0027     DDRA = (1 << DDA7) | (1 << DDA6) | (1 << DDA5) | (1 << DDA4) | (1 << DDA3) | (1 << DDA2) | (1 << DDA1) | (1 << DDA0) ...
00006b efef      	LDI  R30,LOW(255)
00006c bbea      	OUT  0x1A,R30
                 ; 0000 0028     // State: Bit7=0 Bit6=0 Bit5=0 Bit4=0 Bit3=0 Bit2=0 Bit1=0 Bit0=0
                 ; 0000 0029     PORTA = (0 << PORTA7) | (0 << PORTA6) | (0 << PORTA5) | (0 << PORTA4) | (0 << PORTA3) | (0 << PORTA2) | (0 << PORTA1 ...
00006d e0e0      	LDI  R30,LOW(0)
00006e bbeb      	OUT  0x1B,R30
                 ; 0000 002A 
                 ; 0000 002B     // Port B initialization
                 ; 0000 002C     // Function: Bit7=Out Bit6=Out Bit5=Out Bit4=Out Bit3=Out Bit2=Out Bit1=Out Bit0=Out
                 ; 0000 002D     DDRB = (1 << DDB7) | (1 << DDB6) | (1 << DDB5) | (1 << DDB4) | (1 << DDB3) | (1 << DDB2) | (1 << DDB1) | (1 << DDB0) ...
00006f efef      	LDI  R30,LOW(255)
000070 bbe7      	OUT  0x17,R30
                 ; 0000 002E     // State: Bit7=0 Bit6=0 Bit5=0 Bit4=0 Bit3=0 Bit2=0 Bit1=0 Bit0=0
                 ; 0000 002F     PORTB = (0 << PORTB7) | (0 << PORTB6) | (0 << PORTB5) | (0 << PORTB4) | (0 << PORTB3) | (0 << PORTB2) | (0 << PORTB1 ...
000071 e0e0      	LDI  R30,LOW(0)
000072 bbe8      	OUT  0x18,R30
                 ; 0000 0030 
                 ; 0000 0031     // Port C initialization
                 ; 0000 0032     // Function: Bit7=Out Bit6=Out Bit5=Out Bit4=Out Bit3=Out Bit2=Out Bit1=Out Bit0=Out
                 ; 0000 0033     DDRC = (1 << DDC7) | (1 << DDC6) | (1 << DDC5) | (1 << DDC4) | (1 << DDC3) | (1 << DDC2) | (1 << DDC1) | (1 << DDC0) ...
000073 efef      	LDI  R30,LOW(255)
000074 bbe4      	OUT  0x14,R30
                 ; 0000 0034     // State: Bit7=0 Bit6=0 Bit5=0 Bit4=0 Bit3=0 Bit2=0 Bit1=0 Bit0=0
                 ; 0000 0035     PORTC = (0 << PORTC7) | (0 << PORTC6) | (0 << PORTC5) | (0 << PORTC4) | (0 << PORTC3) | (0 << PORTC2) | (0 << PORTC1 ...
000075 e0e0      	LDI  R30,LOW(0)
000076 bbe5      	OUT  0x15,R30
                 ; 0000 0036 
                 ; 0000 0037     // Port D initialization
                 ; 0000 0038     // Function: Bit7=In Bit6=In Bit5=Out Bit4=Out Bit3=In Bit2=In Bit1=Out Bit0=Out
                 ; 0000 0039     DDRD = (0 << DDD7) | (0 << DDD6) | (1 << DDD5) | (1 << DDD4) | (0 << DDD3) | (0 << DDD2) | (1 << DDD1) | (1 << DDD0) ...
000077 e3e3      	LDI  R30,LOW(51)
000078 bbe1      	OUT  0x11,R30
                 ; 0000 003A     // State: Bit7=T Bit6=T Bit5=0 Bit4=1 Bit3=P Bit2=P Bit1=0 Bit0=0
                 ; 0000 003B     PORTD = (0 << PORTD7) | (0 << PORTD6) | (0 << PORTD5) | (1 << PORTD4) | (1 << PORTD3) | (1 << PORTD2) | (0 << PORTD1 ...
000079 e1ec      	LDI  R30,LOW(28)
00007a bbe2      	OUT  0x12,R30
                 ; 0000 003C 
                 ; 0000 003D     // Timer/Counter 0 initialization
                 ; 0000 003E     // Clock source: System Clock
                 ; 0000 003F     // Clock value: Timer 0 Stopped
                 ; 0000 0040     // Mode: Normal top=0xFF
                 ; 0000 0041     // OC0 output: Disconnected
                 ; 0000 0042     TCCR0 = (0 << WGM00) | (0 << COM01) | (0 << COM00) | (0 << WGM01) | (0 << CS02) | (0 << CS01) | (0 << CS00);
00007b e0e0      	LDI  R30,LOW(0)
00007c bfe3      	OUT  0x33,R30
                 ; 0000 0043     TCNT0 = 0x00;
00007d bfe2      	OUT  0x32,R30
                 ; 0000 0044     OCR0 = 0x00;
00007e bfec      	OUT  0x3C,R30
                 ; 0000 0045 
                 ; 0000 0046     // Timer/Counter 1 initialization
                 ; 0000 0047     // Clock source: System Clock
                 ; 0000 0048     // Clock value: Timer1 Stopped
                 ; 0000 0049     // Mode: Normal top=0xFFFF
                 ; 0000 004A     // OC1A output: Disconnected
                 ; 0000 004B     // OC1B output: Disconnected
                 ; 0000 004C     // Noise Canceler: Off
                 ; 0000 004D     // Input Capture on Falling Edge
                 ; 0000 004E     // Timer1 Overflow Interrupt: Off
                 ; 0000 004F     // Input Capture Interrupt: Off
                 ; 0000 0050     // Compare A Match Interrupt: Off
                 ; 0000 0051     // Compare B Match Interrupt: Off
                 ; 0000 0052     TCCR1A = (0 << COM1A1) | (0 << COM1A0) | (0 << COM1B1) | (0 << COM1B0) | (0 << WGM11) | (0 << WGM10);
00007f bdef      	OUT  0x2F,R30
                 ; 0000 0053     TCCR1B = (0 << ICNC1) | (0 << ICES1) | (0 << WGM13) | (0 << WGM12) | (0 << CS12) | (0 << CS11) | (0 << CS10);
000080 bdee      	OUT  0x2E,R30
                 ; 0000 0054     TCNT1H = 0x00;
000081 bded      	OUT  0x2D,R30
                 ; 0000 0055     TCNT1L = 0x00;
000082 bdec      	OUT  0x2C,R30
                 ; 0000 0056     ICR1H = 0x00;
000083 bde7      	OUT  0x27,R30
                 ; 0000 0057     ICR1L = 0x00;
000084 bde6      	OUT  0x26,R30
                 ; 0000 0058     OCR1AH = 0x00;
000085 bdeb      	OUT  0x2B,R30
                 ; 0000 0059     OCR1AL = 0x00;
000086 bdea      	OUT  0x2A,R30
                 ; 0000 005A     OCR1BH = 0x00;
000087 bde9      	OUT  0x29,R30
                 ; 0000 005B     OCR1BL = 0x00;
000088 bde8      	OUT  0x28,R30
                 ; 0000 005C 
                 ; 0000 005D     // Timer/Counter 2 initialization
                 ; 0000 005E     // Clock source: System Clock
                 ; 0000 005F     // Clock value: Timer2 Stopped
                 ; 0000 0060     // Mode: Normal top=0xFF
                 ; 0000 0061     // OC2 output: Disconnected
                 ; 0000 0062     ASSR = 0 << AS2;
000089 bde2      	OUT  0x22,R30
                 ; 0000 0063     TCCR2 = (0 << PWM2) | (0 << COM21) | (0 << COM20) | (0 << CTC2) | (0 << CS22) | (0 << CS21) | (0 << CS20);
00008a bde5      	OUT  0x25,R30
                 ; 0000 0064     TCNT2 = 0x00;
00008b bde4      	OUT  0x24,R30
                 ; 0000 0065     OCR2 = 0x00;
00008c bde3      	OUT  0x23,R30
                 ; 0000 0066 
                 ; 0000 0067     // Timer(s)/Counter(s) Interrupt(s) initialization
                 ; 0000 0068     TIMSK = (0 << OCIE2) | (0 << TOIE2) | (0 << TICIE1) | (0 << OCIE1A) | (0 << OCIE1B) | (0 << TOIE1) | (0 << OCIE0) |  ...
00008d bfe9      	OUT  0x39,R30
                 ; 0000 0069 
                 ; 0000 006A     // External Interrupt(s) initialization
                 ; 0000 006B     // INT0: Off
                 ; 0000 006C     // INT1: Off
                 ; 0000 006D     // INT2: Off
                 ; 0000 006E     MCUCR = (0 << ISC11) | (0 << ISC10) | (0 << ISC01) | (0 << ISC00);
00008e bfe5      	OUT  0x35,R30
                 ; 0000 006F     MCUCSR = (0 << ISC2);
00008f bfe4      	OUT  0x34,R30
                 ; 0000 0070 
                 ; 0000 0071     // USART initialization
                 ; 0000 0072     // USART disabled
                 ; 0000 0073     UCSRB = (0 << RXCIE) | (0 << TXCIE) | (0 << UDRIE) | (0 << RXEN) | (0 << TXEN) | (0 << UCSZ2) | (0 << RXB8) | (0 <<  ...
000090 b9ea      	OUT  0xA,R30
                 ; 0000 0074 
                 ; 0000 0075     // Analog Comparator initialization
                 ; 0000 0076     // Analog Comparator: Off
                 ; 0000 0077     // The Analog Comparator's positive input is
                 ; 0000 0078     // connected to the AIN0 pin
                 ; 0000 0079     // The Analog Comparator's negative input is
                 ; 0000 007A     // connected to the AIN1 pin
                 ; 0000 007B     ACSR = (1 << ACD) | (0 << ACBG) | (0 << ACO) | (0 << ACI) | (0 << ACIE) | (0 << ACIC) | (0 << ACIS1) | (0 << ACIS0);
000091 e8e0      	LDI  R30,LOW(128)
000092 b9e8      	OUT  0x8,R30
                 ; 0000 007C     SFIOR = (0 << ACME);
000093 e0e0      	LDI  R30,LOW(0)
000094 bfe0      	OUT  0x30,R30
                 ; 0000 007D 
                 ; 0000 007E     // ADC initialization
                 ; 0000 007F     // ADC disabled
                 ; 0000 0080     ADCSRA = (0 << ADEN) | (0 << ADSC) | (0 << ADATE) | (0 << ADIF) | (0 << ADIE) | (0 << ADPS2) | (0 << ADPS1) | (0 <<  ...
000095 b9e6      	OUT  0x6,R30
                 ; 0000 0081 
                 ; 0000 0082     // SPI initialization
                 ; 0000 0083     // SPI disabled
                 ; 0000 0084     SPCR = (0 << SPIE) | (0 << SPE) | (0 << DORD) | (0 << MSTR) | (0 << CPOL) | (0 << CPHA) | (0 << SPR1) | (0 << SPR0);
000096 b9ed      	OUT  0xD,R30
                 ; 0000 0085 
                 ; 0000 0086     // TWI initialization
                 ; 0000 0087     // TWI disabled
                 ; 0000 0088     TWCR = (0 << TWEA) | (0 << TWSTA) | (0 << TWSTO) | (0 << TWEN) | (0 << TWIE);
000097 bfe6      	OUT  0x36,R30
                 ; 0000 0089 
                 ; 0000 008A     while (1)
                 _0x4:
                 ; 0000 008B     {
                 ; 0000 008C         if ((i == 0) && (j == 0) && (k == 0))
000098 2400      	CLR  R0
000099 1404      	CP   R0,R4
00009a 0405      	CPC  R0,R5
00009b f441      	BRNE _0x8
00009c 2400      	CLR  R0
00009d 1406      	CP   R0,R6
00009e 0407      	CPC  R0,R7
00009f f421      	BRNE _0x8
0000a0 2400      	CLR  R0
0000a1 1408      	CP   R0,R8
0000a2 0409      	CPC  R0,R9
0000a3 f009      	BREQ _0x9
                 _0x8:
0000a4 c001      	RJMP _0x7
                 _0x9:
                 ; 0000 008D         {
                 ; 0000 008E             PORTC = seven_seg[k];
0000a5 d064      	RCALL SUBOPT_0x0
                 ; 0000 008F             PORTA = seven_seg[j];
                 ; 0000 0090             PORTB = seven_seg[i];
                 ; 0000 0091         }
                 ; 0000 0092         if (PIND .2 == 0)
                 _0x7:
0000a6 9982      	SBIC 0x10,2
0000a7 c026      	RJMP _0xA
                 ; 0000 0093         {
                 ; 0000 0094             PORTC = seven_seg[k];
0000a8 d061      	RCALL SUBOPT_0x0
                 ; 0000 0095             PORTA = seven_seg[j];
                 ; 0000 0096             PORTB = seven_seg[i];
                 ; 0000 0097             delay_ms(200);
0000a9 eca8      	LDI  R26,LOW(200)
0000aa e0b0      	LDI  R27,0
0000ab 940e 0126 	CALL _delay_ms
                 ; 0000 0098             i++;
0000ad 01f2      	MOVW R30,R4
0000ae 9631      	ADIW R30,1
0000af 012f      	MOVW R4,R30
                 ; 0000 0099             if (i == 10)
0000b0 e0ea      	LDI  R30,LOW(10)
0000b1 e0f0      	LDI  R31,HIGH(10)
0000b2 15e4      	CP   R30,R4
0000b3 05f5      	CPC  R31,R5
0000b4 f4c9      	BRNE _0xB
                 ; 0000 009A             {
                 ; 0000 009B                 i = 0;
0000b5 2444      	CLR  R4
0000b6 2455      	CLR  R5
                 ; 0000 009C                 j++;
0000b7 01f3      	MOVW R30,R6
0000b8 9631      	ADIW R30,1
0000b9 013f      	MOVW R6,R30
                 ; 0000 009D                 if (j == 10)
0000ba e0ea      	LDI  R30,LOW(10)
0000bb e0f0      	LDI  R31,HIGH(10)
0000bc 15e6      	CP   R30,R6
0000bd 05f7      	CPC  R31,R7
0000be f479      	BRNE _0xC
                 ; 0000 009E                 {
                 ; 0000 009F                     j = 0;
0000bf 2466      	CLR  R6
0000c0 2477      	CLR  R7
                 ; 0000 00A0                     k++;
0000c1 01f4      	MOVW R30,R8
0000c2 9631      	ADIW R30,1
0000c3 014f      	MOVW R8,R30
                 ; 0000 00A1                     if (k == 10)
0000c4 e0ea      	LDI  R30,LOW(10)
0000c5 e0f0      	LDI  R31,HIGH(10)
0000c6 15e8      	CP   R30,R8
0000c7 05f9      	CPC  R31,R9
0000c8 f429      	BRNE _0xD
                 ; 0000 00A2                         k = j = i = 9;
0000c9 e0e9      	LDI  R30,LOW(9)
0000ca e0f0      	LDI  R31,HIGH(9)
0000cb 012f      	MOVW R4,R30
0000cc 013f      	MOVW R6,R30
0000cd 014f      	MOVW R8,R30
                 ; 0000 00A3                 }
                 _0xD:
                 ; 0000 00A4             }
                 _0xC:
                 ; 0000 00A5         }
                 _0xB:
                 ; 0000 00A6         PORTC = seven_seg[k];
                 _0xA:
0000ce d03b      	RCALL SUBOPT_0x0
                 ; 0000 00A7         PORTA = seven_seg[j];
                 ; 0000 00A8         PORTB = seven_seg[i];
                 ; 0000 00A9         if (PIND .3 == 0)
0000cf 9983      	SBIC 0x10,3
0000d0 c037      	RJMP _0xE
                 ; 0000 00AA         {
                 ; 0000 00AB             if ((i == 0) && (j == 0) && (k == 0))
0000d1 2400      	CLR  R0
0000d2 1404      	CP   R0,R4
0000d3 0405      	CPC  R0,R5
0000d4 f441      	BRNE _0x10
0000d5 2400      	CLR  R0
0000d6 1406      	CP   R0,R6
0000d7 0407      	CPC  R0,R7
0000d8 f421      	BRNE _0x10
0000d9 2400      	CLR  R0
0000da 1408      	CP   R0,R8
0000db 0409      	CPC  R0,R9
0000dc f009      	BREQ _0x11
                 _0x10:
0000dd c002      	RJMP _0xF
                 _0x11:
                 ; 0000 00AC             {
                 ; 0000 00AD                 PORTC = seven_seg[k];
0000de d02b      	RCALL SUBOPT_0x0
                 ; 0000 00AE                 PORTA = seven_seg[j];
                 ; 0000 00AF                 PORTB = seven_seg[i];
                 ; 0000 00B0                 continue;
0000df cfb8      	RJMP _0x4
                 ; 0000 00B1             }
                 ; 0000 00B2             PORTC = seven_seg[k];
                 _0xF:
0000e0 d029      	RCALL SUBOPT_0x0
                 ; 0000 00B3             PORTA = seven_seg[j];
                 ; 0000 00B4             PORTB = seven_seg[i];
                 ; 0000 00B5             delay_ms(165);
0000e1 eaa5      	LDI  R26,LOW(165)
0000e2 e0b0      	LDI  R27,0
0000e3 940e 0126 	CALL _delay_ms
                 ; 0000 00B6             i--;
0000e5 01f2      	MOVW R30,R4
0000e6 9731      	SBIW R30,1
0000e7 012f      	MOVW R4,R30
                 ; 0000 00B7             if (i == -1)
0000e8 efef      	LDI  R30,LOW(65535)
0000e9 efff      	LDI  R31,HIGH(65535)
0000ea 15e4      	CP   R30,R4
0000eb 05f5      	CPC  R31,R5
0000ec f4d9      	BRNE _0x12
                 ; 0000 00B8             {
                 ; 0000 00B9                 i = 9;
0000ed e0e9      	LDI  R30,LOW(9)
0000ee e0f0      	LDI  R31,HIGH(9)
0000ef 012f      	MOVW R4,R30
                 ; 0000 00BA                 j--;
0000f0 01f3      	MOVW R30,R6
0000f1 9731      	SBIW R30,1
0000f2 013f      	MOVW R6,R30
                 ; 0000 00BB                 if (j == -1)
0000f3 efef      	LDI  R30,LOW(65535)
0000f4 efff      	LDI  R31,HIGH(65535)
0000f5 15e6      	CP   R30,R6
0000f6 05f7      	CPC  R31,R7
0000f7 f481      	BRNE _0x13
                 ; 0000 00BC                 {
                 ; 0000 00BD                     j = 9;
0000f8 e0e9      	LDI  R30,LOW(9)
0000f9 e0f0      	LDI  R31,HIGH(9)
0000fa 013f      	MOVW R6,R30
                 ; 0000 00BE                     k--;
0000fb 01f4      	MOVW R30,R8
0000fc 9731      	SBIW R30,1
0000fd 014f      	MOVW R8,R30
                 ; 0000 00BF                     if (k == -1)
0000fe efef      	LDI  R30,LOW(65535)
0000ff efff      	LDI  R31,HIGH(65535)
000100 15e8      	CP   R30,R8
000101 05f9      	CPC  R31,R9
000102 f429      	BRNE _0x14
                 ; 0000 00C0                     {
                 ; 0000 00C1                         k = j = i = 0;
000103 e0e0      	LDI  R30,LOW(0)
000104 e0f0      	LDI  R31,HIGH(0)
000105 012f      	MOVW R4,R30
000106 013f      	MOVW R6,R30
000107 014f      	MOVW R8,R30
                 ; 0000 00C2                     }
                 ; 0000 00C3                 }
                 _0x14:
                 ; 0000 00C4             }
                 _0x13:
                 ; 0000 00C5         }
                 _0x12:
                 ; 0000 00C6     }
                 _0xE:
000108 cf8f      	RJMP _0x4
                 ; 0000 00C7 }
                 _0x15:
000109 cfff      	RJMP _0x15
                 ; .FEND
                 
                 	.DSEG
                 _seven_seg:
000260           	.BYTE 0x14
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:97 WORDS
                 SUBOPT_0x0:
00010a 01f4      	MOVW R30,R8
00010b e6a0      	LDI  R26,LOW(_seven_seg)
00010c e0b2      	LDI  R27,HIGH(_seven_seg)
00010d 0fee      	LSL  R30
00010e 1fff      	ROL  R31
00010f 0fae      	ADD  R26,R30
000110 1fbf      	ADC  R27,R31
000111 91ec      	LD   R30,X
000112 bbe5      	OUT  0x15,R30
000113 01f3      	MOVW R30,R6
000114 e6a0      	LDI  R26,LOW(_seven_seg)
000115 e0b2      	LDI  R27,HIGH(_seven_seg)
000116 0fee      	LSL  R30
000117 1fff      	ROL  R31
000118 0fae      	ADD  R26,R30
000119 1fbf      	ADC  R27,R31
00011a 91ec      	LD   R30,X
00011b bbeb      	OUT  0x1B,R30
00011c 01f2      	MOVW R30,R4
00011d e6a0      	LDI  R26,LOW(_seven_seg)
00011e e0b2      	LDI  R27,HIGH(_seven_seg)
00011f 0fee      	LSL  R30
000120 1fff      	ROL  R31
000121 0fae      	ADD  R26,R30
000122 1fbf      	ADC  R27,R31
000123 91ec      	LD   R30,X
000124 bbe8      	OUT  0x18,R30
000125 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
000126 9610      	adiw r26,0
000127 f039      	breq __delay_ms1
                 __delay_ms0:
000128 95a8      	wdr
                +
000129 ed80     +LDI R24 , LOW ( 0x7D0 )
00012a e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
00012b 9701     +SBIW R24 , 1
00012c f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
00012d 9711      	sbiw r26,1
00012e f7c9      	brne __delay_ms0
                 __delay_ms1:
00012f 9508      	ret
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega32 register use summary:
r0 :  22 r1 :   1 r2 :   0 r3 :   0 r4 :  13 r5 :   5 r6 :  13 r7 :   5 
r8 :  11 r9 :   4 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   0 
r16:   0 r17:   0 r18:   0 r19:   0 r20:   0 r21:   0 r22:   2 r23:   0 
r24:   9 r25:   3 r26:  13 r27:  10 r28:   1 r29:   1 r30: 116 r31:  25 
x  :   6 y  :   0 z  :   7 
Registers used: 19 out of 35 (54.3%)

ATmega32 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   3 add   :   3 
adiw  :   4 and   :   0 andi  :   0 asr   :   0 bclr  :   0 bld   :   0 
brbc  :   0 brbs  :   0 brcc  :   0 brcs  :   0 break :   0 breq  :   4 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   0 
brlt  :   0 brmi  :   0 brne  :  15 brpl  :   0 brsh  :   0 brtc  :   0 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 call  :   2 
cbi   :   0 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :  12 cls   :   0 clt   :   0 clv   :   0 clz   :   0 com   :   0 
cp    :  12 cpc   :  12 cpi   :   0 cpse  :   0 dec   :   1 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :   0 inc   :   0 jmp   :  22 ld    :   3 ldd   :   0 ldi   :  55 
lds   :   0 lpm   :   7 lsl   :   3 lsr   :   0 mov   :   0 movw  :  26 
mul   :   0 muls  :   0 mulsu :   0 neg   :   0 nop   :   0 or    :   0 
ori   :   0 out   :  43 pop   :   0 push  :   0 rcall :   5 ret   :   2 
reti  :   0 rjmp  :   8 rol   :   3 ror   :   0 sbc   :   0 sbci  :   0 
sbi   :   0 sbic  :   2 sbis  :   0 sbiw  :   8 sbr   :   0 sbrc  :   0 
sbrs  :   0 sec   :   0 seh   :   0 sei   :   0 sen   :   0 ser   :   0 
ses   :   0 set   :   0 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :   3 std   :   0 sts   :   0 sub   :   0 subi  :   0 swap  :   0 
tst   :   0 wdr   :   1 
Instructions used: 26 out of 116 (22.4%)

ATmega32 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000260    568     40    608   32768   1.9%
[.dseg] 0x000060 0x000274      0     20     20    2048   1.0%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 7 warnings
